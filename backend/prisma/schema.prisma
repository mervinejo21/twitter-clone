// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(uuid())
  email           String    @unique
  username        String    @unique
  displayName     String?
  password        String
  bio             String?
  profileImageUrl String?
  bannerImageUrl  String?
  isVerified      Boolean   @default(false)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  tweets          Tweet[]
  likes           Like[]
  comments        Comment[]
  followers       Follow[]        @relation("following")
  following       Follow[]        @relation("follower")
  notifications   Notification[]  @relation("userNotifications")
  notificationFor Notification[]  @relation("targetUser")
  pollResponses   PollResponse[]
  messages        Message[]
  conversations   ConversationParticipant[]
}

model Tweet {
  id        String   @id @default(uuid())
  content   String
  images    String[] // URLs to images
  videoUrl  String?   // URL to video
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  
  // For retweets
  retweetId String?
  retweet   Tweet?   @relation("retweets", fields: [retweetId], references: [id], onDelete: SetNull)
  retweets  Tweet[]  @relation("retweets")
  
  // For replies
  replyToId String?
  replyTo   Tweet?   @relation("replies", fields: [replyToId], references: [id], onDelete: SetNull)
  replies   Tweet[]  @relation("replies")

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  likes     Like[]
  comments  Comment[]
  poll      Poll?
  hashtags  HashtagsOnTweets[]
}

model HashtagsOnTweets {
  tweet     Tweet   @relation(fields: [tweetId], references: [id], onDelete: Cascade)
  tweetId   String
  hashtag   Hashtag @relation(fields: [hashtagId], references: [id], onDelete: Cascade)
  hashtagId String

  @@id([tweetId, hashtagId])
}

model Hashtag {
  id     String            @id @default(uuid())
  name   String            @unique
  tweets HashtagsOnTweets[]
}

model Like {
  id        String   @id @default(uuid())
  userId    String
  tweetId   String
  createdAt DateTime @default(now())

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tweet     Tweet    @relation(fields: [tweetId], references: [id], onDelete: Cascade)

  @@unique([userId, tweetId])
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  tweetId   String

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tweet     Tweet    @relation(fields: [tweetId], references: [id], onDelete: Cascade)
}

model Poll {
  id         String         @id @default(uuid())
  tweetId    String         @unique
  question   String
  options    PollOption[]
  expiresAt  DateTime
  createdAt  DateTime       @default(now())

  // Relations
  tweet      Tweet          @relation(fields: [tweetId], references: [id], onDelete: Cascade)
}

model PollOption {
  id          String         @id @default(uuid())
  text        String
  pollId      String
  
  // Relations
  poll        Poll           @relation(fields: [pollId], references: [id], onDelete: Cascade)
  responses   PollResponse[]
}

model PollResponse {
  id           String      @id @default(uuid())
  userId       String
  pollOptionId String
  createdAt    DateTime    @default(now())

  // Relations
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  pollOption   PollOption  @relation(fields: [pollOptionId], references: [id], onDelete: Cascade)

  @@unique([userId, pollOptionId])
}

model Follow {
  id          String  @id @default(uuid())
  followerId  String
  followingId String

  // Relations
  follower    User    @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  following   User    @relation("following", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
}

model Notification {
  id         String           @id @default(uuid())
  type       NotificationType
  content    String
  isRead     Boolean          @default(false)
  createdAt  DateTime         @default(now())
  userId     String
  targetId   String?
  tweetId    String?

  // Relations
  user       User             @relation("userNotifications", fields: [userId], references: [id], onDelete: Cascade)
  target     User?            @relation("targetUser", fields: [targetId], references: [id], onDelete: SetNull)
}

enum NotificationType {
  LIKE
  COMMENT
  FOLLOW
  RETWEET
  MENTION
  SYSTEM
}

model Conversation {
  id          String    @id @default(uuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  participants ConversationParticipant[]
  messages     Message[]
}

model ConversationParticipant {
  id             String       @id @default(uuid())
  userId         String
  conversationId String
  joinedAt       DateTime     @default(now())
  
  // Relations
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@unique([userId, conversationId])
}

model Message {
  id             String       @id @default(uuid())
  content        String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  userId         String
  conversationId String
  isRead         Boolean      @default(false)
  
  // Relations
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
}
